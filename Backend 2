const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;
const SECRET_KEY = 'supersecretkey';

app.use(bodyParser.json());

// Dummy user and account data
const users = {
  user1: { password: 'pass123', balance: 1000 }
};

// JWT Auth Middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) return res.status(401).json({ error: 'Token missing' });

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.status(403).json({ error: 'Invalid token' });
    req.user = user;
    next();
  });
};

// Login Route
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users[username];

  if (!user || user.password !== password) {
    return res.status(401).json({ error: 'Invalid credentials' });
  }

  const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });
  res.json({ token });
});

// Balance Route
app.get('/balance', authenticateToken, (req, res) => {
  const user = users[req.user.username];
  res.json({ balance: user.balance });
});

// Deposit Route
app.post('/deposit', authenticateToken, (req, res) => {
  const { amount } = req.body;
  const user = users[req.user.username];

  if (amount <= 0) return res.status(400).json({ error: 'Invalid deposit amount' });

  user.balance += amount;
  res.json({ message: 'Deposit successful', balance: user.balance });
});

// Withdraw Route
app.post('/withdraw', authenticateToken, (req, res) => {
  const { amount } = req.body;
  const user = users[req.user.username];

  if (amount <= 0) return res.status(400).json({ error: 'Invalid withdrawal amount' });
  if (user.balance < amount) return res.status(400).json({ error: 'Insufficient funds' });

  user.balance -= amount;
  res.json({ message: 'Withdrawal successful', balance: user.balance });
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
